{"version":3,"sources":["styles/secondpage.module.css","styles/container.module.css","styles/mainpage.module.css","styles/input.module.css","snow.jpg","sun.jpg","mist.jpg","cloudy.jpg","thunderstorm.jpg","rain.jpg","components/Container.js","components/WeatherAddInput.js","components/MainPage.js","components/SecondPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","weatherList","Clouds","Clear","Snow","Rain","Drizzle","Thunderstorm","Mist","Container","cityName","temperature","humidity","weather","weather_icon","redirect","className","styles","wrapper","onClick","temp","to","link","upper_container","Math","round","lower_container","src","alt","Input","add","useState","inputHandler","setInput","onSubmit","event","request","preventDefault","split","length","isNaN","axios","get","then","res","status","data","name","localStorage","setItem","getItem","id","main","icon","alert","createWeather","main_form","type","onChange","target","value","input","hardcode","MainPage","setData","inputToggle","useEffect","current_pos","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","JSON","stringify","parse","cityList","list","map","elem","key","indexOf","lat","long","push","weatherlist","addFromInput","add_button","background","sun","snow","mist","cloudy","thunder","rain","SecondPage","match","console","log","style","city","params","App","secondPage","setSecondPage","basename","process","exact","path","render","props","setPage","Boolean","window","location","hostname","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,KAAO,yBAAyB,KAAO,yBAAyB,KAAO,yBAAyB,YAAc,gCAAgC,SAAW,+B,mBCAjND,EAAOC,QAAU,CAAC,QAAU,2BAA2B,gBAAkB,mCAAmC,gBAAkB,mCAAmC,KAAO,0B,mBCAxKD,EAAOC,QAAU,CAAC,YAAc,8BAA8B,WAAa,+B,mBCA3ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,uB,mBCD/DD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,kC,6PCIrCC,EAAc,CACnBC,OAAQ,SACRC,MAAO,MACPC,KAAM,OACNC,KAAM,OACNC,QAAS,OACTC,aAAc,UACdC,KAAM,QA2BQC,EAxBG,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAE5E,OACC,yBAAKC,UAAWC,IAAOC,QAASC,QAAS,WACxCJ,EAAS,CACRK,KAAMT,EACNC,SAAUA,EACVC,QAASZ,EAAYa,OAGtB,kBAAC,IAAD,CAAMO,GAAE,eAAUX,GAAYM,UAAWC,IAAOK,MAC/C,yBAAKN,UAAWC,IAAOM,iBACtB,6BAAMb,GACN,uCAASc,KAAKC,MAAMd,GAApB,WAED,yBAAKK,UAAWC,IAAOS,iBACtB,uCAASd,EAAT,MACA,6BAAK,yBAAKe,IAAG,2CAAsCd,EAAtC,WAAwDe,IAAI,aCgB/DC,MA1Cf,YAAyB,IAARC,EAAO,EAAPA,IAAO,EAEaC,mBAAS,MAFtB,mBAEbC,EAFa,KAECC,EAFD,KAmCpB,OACI,0BAAMC,SAAU,SAACC,GAAD,OAhCE,SAACA,GACnB,IAAIC,EAAU,KACdD,EAAME,iBAEFD,EADAJ,EAAaM,MAAM,KAAKC,OAAS,EAC1B,sBAAkBP,EAAaM,MAAM,KAAK,GAA1C,gBAAoDN,EAAaM,MAAM,KAAK,IAC5EE,MAAMR,GACN,oBAAgBA,GAEhB,mBAAeA,GAE1BS,IAAMC,IAAN,kDAC+CN,EAD/C,yDAEEO,MAAK,SAACC,GACe,MAAfA,EAAIC,SACkB,KAAlBD,EAAIE,KAAKC,MACTC,aAAaC,QAAQ,SAArB,UACOD,aAAaE,QAAQ,UAD5B,YACyCN,EAAIE,KAAKK,KAElDrB,EACI,kBAAC,EAAD,CACYpB,SAAUkC,EAAIE,KAAKC,KACnBpC,YAAaiC,EAAIE,KAAKM,KAAKhC,KAC3BR,SAAUgC,EAAIE,KAAKM,KAAKxC,SACxBC,QAAS+B,EAAIE,KAAKjC,QAAQ,GAAGwC,KAC7BvC,aAAc8B,EAAIE,KAAKjC,QAAQ,GAAGuC,SAE/CE,MAAM,4BAMMC,CAAcpB,IAAQnB,UAAWC,IAAOuC,WAC/D,2BAAOC,KAAK,OAAOC,SAAU,SAACvB,GAAD,OAAWF,EAASE,EAAMwB,OAAOC,QAAQ5C,UAAWC,IAAO4C,UCpC9FC,EAAW,yCAoFFC,EA5EE,SAAC,GAAkB,IAAhBhD,EAAe,EAAfA,SAAe,EAEHgB,mBAAS,IAFN,mBAE3B9B,EAF2B,KAEd+D,EAFc,OAGFjC,oBAAS,GAHP,mBAG3BkC,EAH2B,KAGdhC,EAHc,KAKlCiC,qBAAU,WACT,IAAIC,EAAcnB,aAAaE,QAAQ,YACnB,OAAhBiB,EACCC,UAAUC,YACbD,UAAUC,YAAYC,oBAAmB,SAACC,IACzCJ,EAAc,IACH,IAAUI,EAAIC,OAAOC,SAChCN,EAAW,KAAWI,EAAIC,OAAOE,UACjC1B,aAAaC,QAAQ,WAAY0B,KAAKC,UAAUT,SAGjDA,EAAc,IACH,IAAU,GACrBA,EAAW,KAAW,GACtBnB,aAAaC,QAAQ,WAAY0B,KAAKC,UAAUT,KAGjDA,EAAcQ,KAAKE,MAAMV,GAE1B,IAAIW,EAAW9B,aAAaE,QAAQ,UACnB,OAAb4B,IACH9B,aAAaC,QAAQ,SAAUa,GAC/BgB,EAAWhB,GAEZrB,IAAMC,IAAN,2DACqDoC,EADrD,yDAEEnC,MAAK,SAACC,GACP,IAAImC,EAAO,GACLjC,EAAOF,EAAIE,KAAKiC,KACtBA,EAAOjC,EAAKkC,KAAI,SAACC,GAChB,OAAO,kBAAC,EAAD,CACLvE,SAAUuE,EAAKlC,KACfnC,SAAUqE,EAAK7B,KAAKxC,SACpBD,YAAasE,EAAK7B,KAAKhC,KACvBP,QAASoE,EAAKpE,QAAQ,GAAGwC,KACzBvC,aAAcmE,EAAKpE,QAAQ,GAAGuC,KAC9B8B,IAAKpC,EAAKqC,QAAQF,GAClBlE,SAAU,SAAC+B,GAAD,OAAU/B,EAAS+B,SAEhCL,IAAMC,IAAN,8DACwDyB,EAAYiB,IADpE,gBAC+EjB,EAAYkB,KAD3F,yDAEE1C,MAAK,SAACC,GACPmC,EAAKO,KACJ,kBAAC,EAAD,CACC5E,SAAUkC,EAAIE,KAAKC,KACnBnC,SAAUgC,EAAIE,KAAKM,KAAKxC,SACxBD,YAAaiC,EAAIE,KAAKM,KAAKhC,KAC3BP,QAAS+B,EAAIE,KAAKjC,QAAQ,GAAGwC,KAC7BvC,aAAc8B,EAAIE,KAAKjC,QAAQ,GAAGuC,KAClC8B,IAAKH,EAAKxC,OACVxB,SAAU,SAAC+B,GAAD,OAAU/B,EAAS+B,OAE/BkB,EAAQe,WAGR,CAAChE,IASJ,OAAO,6BACL,yBAAKC,UAAWC,IAAOsE,aAActF,GACpCgE,EAAc,kBAAC,EAAD,CAAOnC,IAAK,SAACmD,GAAD,OATR,SAACA,GACrBjB,EAAQ,GAAD,mBACH/D,GADG,CAENgF,KAMqCO,CAAaP,MAAW,KAC7D,4BAAQjE,UAAWC,IAAOwE,WAAYhC,KAAK,SAAStC,QAAS,kBAAMc,GAAUgC,KAA7E,O,uHC5EGyB,EAAa,CACfC,IAAKA,IACLC,KAAMA,IACNC,KAAMA,IACNC,OAAQA,IACRC,QAASA,IACTC,KAAMA,KAoBKC,MAjBf,YAAyD,IAAnCC,EAAkC,EAAlCA,MAAO9E,EAA2B,EAA3BA,KAAMR,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAIzC,OAFAsF,QAAQC,IAAIvF,GAGR,yBAAKG,UAAWC,IAAOC,QAASmF,MAAO,CAAC,gBAAkB,OAAlB,OAA0BX,EAAW7E,GAArC,OACpC,kBAAC,IAAD,CAAMQ,GAAG,IAAIL,UAAWC,IAAOK,MAA/B,UACA,yBAAKN,UAAWC,IAAOqF,MAAOJ,EAAMK,OAAOxD,MAC3C,yBAAK/B,UAAWC,IAAO6B,MACnB,yBAAK9B,UAAWC,IAAON,aAAvB,UAAwCa,KAAKC,MAAML,GAAnD,UACA,yBAAKJ,UAAWC,IAAOL,UAAvB,UAAqCA,EAArC,S,aCND4F,MAhBf,WAAgB,IAAD,EAEsBzE,mBAAS,MAF/B,mBAEP0E,EAFO,KAEKC,EAFL,KAQd,OACC,kBAAC,IAAD,CAAeC,SAAQ,UAAKC,kCAAL,MACtB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBjG,SAAU,SAAC+B,GAAD,OAN1D,SAACA,GAChB4D,EAAc5D,GAKqEmE,CAAQnE,UAC1F,kBAAC,IAAD,CAAOgE,KAAK,cAAcC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuB5F,KAAMqF,EAAWrF,KAAMR,SAAU6F,EAAW7F,SAAUC,QAAS4F,EAAW5F,gBCN7HqG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD6H3C,kBAAmBpD,WACrBA,UAAUqD,cAAcC,MAAM/E,MAAK,SAAAgF,GACjCA,EAAaC,kB","file":"static/js/main.3bc03df1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"secondpage_wrapper__3E1u1\",\"city\":\"secondpage_city__5_Mwd\",\"link\":\"secondpage_link__22toA\",\"data\":\"secondpage_data__2Tg24\",\"temperature\":\"secondpage_temperature__2bn3J\",\"humidity\":\"secondpage_humidity__eJdRE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"container_wrapper__3050D\",\"upper_container\":\"container_upper_container__1QPCi\",\"lower_container\":\"container_lower_container__3fNUm\",\"link\":\"container_link__1fflm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherlist\":\"mainpage_weatherlist__ebiE2\",\"add_button\":\"mainpage_add_button__1AOcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_form\":\"input_main_form__1GyPA\",\"input\":\"input_input__zY48e\"};","module.exports = __webpack_public_path__ + \"static/media/snow.dcade456.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun.3a92b69a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mist.456e50a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.68a2164a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.4a1a91b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.7d07ea23.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from '../styles/container.module.css';\n\nconst weatherList = {\n\tClouds: 'cloudy',\n\tClear: 'sun',\n\tSnow: 'snow',\n\tRain: 'rain',\n\tDrizzle: 'rain',\n\tThunderstorm: 'thunder',\n\tMist: 'mist',\n}\n\nconst Container = ({ cityName, temperature, humidity, weather, weather_icon, redirect }) => {\n\n\treturn (\n\t\t<div className={styles.wrapper} onClick={() => {\n\t\t\tredirect({\n\t\t\t\ttemp: temperature,\n\t\t\t\thumidity: humidity,\n\t\t\t\tweather: weatherList[weather_icon],\n\t\t\t})\n\t\t}}>\n\t\t\t<Link to={`city/${cityName}`} className={styles.link}>\n\t\t\t\t<div className={styles.upper_container}>\n\t\t\t\t\t<div>{cityName}</div>\n\t\t\t\t\t<div>{`${Math.round(temperature)}Â°C`}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={styles.lower_container}>\n\t\t\t\t\t<div>{`${humidity}%`}</div>\n\t\t\t\t\t<div><img src={`http://openweathermap.org/img/wn/${weather}@2x.png`} alt=\"...\"/></div>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default Container;\n","import React, { useState } from 'react';\nimport styles from '../styles/input.module.css';\nimport axios from 'axios';\nimport Container from './Container';\n\nfunction Input({ add }) {\n\n    const [inputHandler, setInput] = useState(null);\n\n    const createWeather = (event) => {\n        let request = null;\n        event.preventDefault();\n        if (inputHandler.split(' ').length > 1) {\n            request = `weather?lat=${inputHandler.split(' ')[0]}&lon=${inputHandler.split(' ')[1]}`;\n        } else if (isNaN(inputHandler)) {\n            request = `weather?q=${inputHandler}`;\n        } else {\n            request = `group?id=${inputHandler}`;\n        }\n        axios.get(\n            `https://api.openweathermap.org/data/2.5/${request}&units=metric&appid=795f138d9f6871399760a03fac9ace13`\n        ).then((res) => {\n            if (res.status === 200) {\n                if (res.data.name !== '') {\n                    localStorage.setItem('cities',\n                        `${localStorage.getItem('cities')},${res.data.id}`\n                    );\n                    add(\n                        <Container\n                                    cityName={res.data.name}\n                                    temperature={res.data.main.temp}\n                                    humidity={res.data.main.humidity}\n                                    weather={res.data.weather[0].icon}\n                                    weather_icon={res.data.weather[0].main} />\n                    );\n                } else alert('Invalid coordinates.');\n            }\n        })\n    }\n\n    return (\n        <form onSubmit={(event) => createWeather(event)} className={styles.main_form}>\n            <input type='text' onChange={(event) => setInput(event.target.value)} className={styles.input}/>\n        </form>\n    );\n}\n\nexport default Input;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styles from '../styles/mainpage.module.css';\nimport Input from './WeatherAddInput';\nimport Container from './Container';\n\nconst hardcode = '3169070,6359304,2950159,6455259,524901';\n\n// moscow: '524901',\n// paris: '6455259',\n// berlin: '2950159',\n// madrid: '6359304',\n// rome: '3169070'\n\nconst MainPage = ({ redirect }) => {\n\n\tconst [weatherList, setData] = useState([]);\n\tconst [inputToggle, setInput] = useState(false);\n\n\tuseEffect(() => {\n\t\tlet current_pos = localStorage.getItem('location');\n\t\tif (current_pos === null) {\n\t\t\tif (navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition((pos) => {\n\t\t\t\t\tcurrent_pos = {};\n\t\t\t\t\tcurrent_pos['lat'] = pos.coords.latitude;\n\t\t\t\t\tcurrent_pos['long'] = pos.coords.longitude;\n\t\t\t\t\tlocalStorage.setItem('location', JSON.stringify(current_pos));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcurrent_pos = {};\n\t\t\t\tcurrent_pos['lat'] = 55;\n\t\t\t\tcurrent_pos['long'] = 37;\n\t\t\t\tlocalStorage.setItem('location', JSON.stringify(current_pos));\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_pos = JSON.parse(current_pos);\n\t\t};\n\t\tlet cityList = localStorage.getItem('cities');\n\t\tif (cityList === null) {\n\t\t\tlocalStorage.setItem('cities', hardcode);\n\t\t\tcityList = hardcode;\n\t\t}\n\t\taxios.get(\n\t\t\t`https://api.openweathermap.org/data/2.5/group?id=${cityList}&units=metric&appid=795f138d9f6871399760a03fac9ace13`\n\t\t).then((res) => {\n\t\t\tlet list = [];\n\t\t\tconst data = res.data.list;\n\t\t\tlist = data.map((elem) => {\n\t\t\t\treturn <Container\n\t\t\t\t\t\tcityName={elem.name}\n\t\t\t\t\t\thumidity={elem.main.humidity}\n\t\t\t\t\t\ttemperature={elem.main.temp}\n\t\t\t\t\t\tweather={elem.weather[0].icon}\n\t\t\t\t\t\tweather_icon={elem.weather[0].main}\n\t\t\t\t\t\tkey={data.indexOf(elem)}\n\t\t\t\t\t\tredirect={(data) => redirect(data)}/>\n\t\t\t});\n\t\t\taxios.get(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${current_pos.lat}&lon=${current_pos.long}&units=metric&appid=795f138d9f6871399760a03fac9ace13`,\n\t\t\t).then((res) => {\n\t\t\t\tlist.push(\n\t\t\t\t\t<Container\n\t\t\t\t\t\tcityName={res.data.name}\n\t\t\t\t\t\thumidity={res.data.main.humidity}\n\t\t\t\t\t\ttemperature={res.data.main.temp}\n\t\t\t\t\t\tweather={res.data.weather[0].icon}\n\t\t\t\t\t\tweather_icon={res.data.weather[0].main}\n\t\t\t\t\t\tkey={list.length}\n\t\t\t\t\t\tredirect={(data) => redirect(data)}/>\n\t\t\t\t);\n\t\t\t\tsetData(list);\n\t\t\t});\n\t\t});\n\t}, [redirect]);\n\n\tconst addFromInput = (elem) => {\n\t\tsetData([\n\t\t\t...weatherList,\n\t\t\telem\n\t\t]);\n\t}\n\n\treturn <div>\n\t\t\t<div className={styles.weatherlist}>{weatherList}</div>\n\t\t\t{inputToggle ? <Input add={(elem) => addFromInput(elem)}/> : null}\n\t\t\t<button className={styles.add_button} type=\"button\" onClick={() => setInput(!inputToggle)}>&#43;</button>\n\t\t</div>;\n};\n\nexport default MainPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from '../styles/secondpage.module.css';\nimport snow from '../snow.jpg';\nimport sun from '../sun.jpg';\nimport mist from '../mist.jpg';\nimport cloudy from '../cloudy.jpg';\nimport thunder from '../thunderstorm.jpg';\nimport rain from '../rain.jpg';\n\nconst background = {\n    sun: sun,\n    snow: snow,\n    mist: mist,\n    cloudy: cloudy,\n    thunder: thunder,\n    rain: rain,\n}\n\nfunction SecondPage({ match, temp, humidity, weather }) {\n\n    console.log(weather);\n\n    return (\n        <div className={styles.wrapper} style={{'backgroundImage': `url(${background[weather]})`}}>\n            <Link to='/' className={styles.link}>&#8678;</Link>\n            <div className={styles.city}>{match.params.name}</div>\n            <div className={styles.data}>\n                <div className={styles.temperature}>{`${Math.round(temp)}Â°C`}</div>\n                <div className={styles.humidity}>{`${humidity}%`}</div>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default SecondPage;","import React, { useState } from 'react';\nimport MainPage from './components/MainPage';\nimport SecondPage from './components/SecondPage';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\n\n\nfunction App() {\n\n\tconst [secondPage, setSecondPage] = useState(null);\n\n\tconst setPage = (data) => {\n\t\tsetSecondPage(data);\n\t}\n\n\treturn (\n\t\t<BrowserRouter basename={`${process.env.PUBLIC_URL}/`}>\n\t\t\t<Route exact path='/' render={(props) => <MainPage {...props} redirect={(data) => setPage(data)} /> } />\n\t\t\t<Route path='/city/:name' render={(props) => <SecondPage {...props} temp={secondPage.temp} humidity={secondPage.humidity} weather={secondPage.weather} />} />\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}